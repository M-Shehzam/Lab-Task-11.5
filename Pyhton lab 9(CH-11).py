# -*- coding: utf-8 -*-
"""Pyhton Lab 9(CH 11).py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z1Xx94NmfMAswyg2KRdkCmd17jgm-RVY
"""

#Q1
x = eval(input("Enter Total-Number of Products: "))
d = {}
for x in range(x):
  y = input("Enter Product Name: ")
  z = int(input("Enter Product Value: "))
  d[y] = z

while True:
  y = input("To get it's Value, Enter Name of the Product: ")
  if y in d:
    print("The Price is: ",d[y])
  else:
    print("Not-Found")
    break
print(d)

#Q2
d = {'Coke':100,'Pepsi':200,'Bugatti':300}
print(d)
y = eval(input("Enter Amount: $"))
for i,j in d.items():
  if  j < y:
    print(i,"=",j)

#Q3(A)
year = {"January":31,"Febuary":28,"March":30,"April":30,"May":31,"June":30}
x = input("Enter Name of a Month: ")
for i,j in year.items():
  if x == i:
    print(j)

#Q3(B)
year = {"January":31,"Febuary":28,"March":30,"April":30,"May":31,"June":30}
s = {i:year[i] for i in sorted(year)}
print(s.keys())

#Q3(C)
year = {"January":31,"Febuary":28,"March":30,"April":30,"May":31,"June":30}
for i,j in year.items():
  if j == 31:
    print(i)

#Q3(D)
year = {"January":31,"Febuary":28,"March":30,"April":30,"May":31,"June":30}
for i in year:
  if year[i] == 28:
    print(i,"=",year[i])
for i in year:
  if year[i] == 30:
    print(i,"=",year[i])
for i in year:
  if year[i] == 31:
    print(i,"=",year[i])

#Q3(E)
year = {"January":31,"Febuary":28,"March":30,"April":30,"May":31,"June":30}
x = input("Enter Name of a Month: ")
for i,j in year.items():
  if x[:2] in i:
    print(j)

#Q4
d = {"basheer":"1234"} #Was supposed to be 10!
x = input("Enter Username: ")    
y = input("Enter Password: ")
for i,j in d.items():
  if i == x and y == d[i]:
    print("\nYou are Succesfully logged in at:",i.title())
  else:
    print("You are not a Valid User!\Your Login Details cannot be Found!")

#Q5
x = eval(input("Enter Number of Teams: "))
d = {}
s = []
w = []
p = 0
for i in range(x):
  team_name = input("Enter Team Name: ")
  ws = eval(input("Number of Team Winning Games: "))
  d.update({team_name:ws})
  s.append(ws)
  w.append(team_name)

k = input("Enter team to check % of Wins: ")
for  i,j in d.items():
  if k == i:
    score = d[i]
    p = ((score/100) * 100)

print("\nYour teams list is {}\nWin Percentage of team is: {}%\nAll Teams with winning record: {}".format(d,p,w))

#Q6
num_team = eval(input("Enter Number Of Teams: "))
team_dict= {}
for team in range(num_team):
  key = input("Enter Team Name: ")
  value = []
  wins = eval(input("Enter Win: "))
  losses = eval(input("Enter Losses: "))
  value.extend((wins,losses))
  team_dict.update({key:value})
       
print(team_dict)

#Q7
matrix_dict = {}
matrix = [1,2,3,4,5,
          5,6,7,4,5,
          6,7,8,0,3,
          4,2,1,5,6,
          7,8,9,0,5]
for num in range(len(matrix)):
  key = matrix[num]
  value = matrix.count(key)
  matrix_dict.update({key:value})
print(matrix_dict)

#Q8
from random import choice

cards = {"One":1,"Two":2,"Three":3,"Four":4,"Five":5,"Six":6,"Seven":7,"Eight":8,"Nine":9,"Ten":10}
c = 3
x = []
y = []
for i in range(c):
    c1 = choice(list(cards.values()))
    c2 = choice(list(cards.values()))
    x.append(c1)
    y.append(c2)
print(x,y)

if sum(x) > sum(y):
    print("Player 1 wins with: ",sum(x),"\nAgainst Player 2 with:",sum(y))
elif sum(y) > sum(x):
    print("Player 2 wins with: ",sum(y),"Against Player 1 with:",sum(x))

#Q9
from enum import Enum
from random import sample

class Cards(Enum):
    DECK = [{'value':i, 'suit':c} 
            for c in ['spades', 'clubs', 'hearts', 'diamonds'] 
            for i in range(2,15)]

def get_cards():
    rand_cards = sample(Cards.DECK.value, 3)
    return rand_cards

def flush(hand):
    if hand[0]['suit'] == hand[1]['suit'] == hand[2]['suit']:
        print('(A) =\nYou have a flush.')
    else:
        print('(A) =\nYou don\'t have a flush.')

def three_of_a_kind(hand):
    if hand[0]['value'] == hand[1]['value'] == hand[2]['value']:
        print('(B) =\nYou have a three-of-a-kind.')
    else:
        print("(B) =\nYou don't have a three-of-a-kind.")

def pair(hand):
    try:
        for i in range(3):
            if hand[i]['value'] == hand[i+1]['value']:
                print('(C) =\nYou have a pair.')
                break
            else:
                pass
    except IndexError:
        print("(C) =\nYou don't have a pair.")

def straight(hand):
    face_val = []
    for i in range(3):
        face_val.append(hand[i]['value'])
    face_val.sort(reverse = True)
    try:
        for i in range(3):
            if (face_val[i] - face_val[i+1] == 1) and (face_val[i+1] - face_val[i+2] == 1):
                print('(D) =\nYou have a straight.')
                break
            else:
                pass
    except IndexError:
        print('(D) =\nYou don\'t have a straight.')

def main():
    hand = get_cards()
    print('The following below is your hand.')
    print(hand)
    flush(hand)
    three_of_a_kind(hand)
    pair(hand)
    straight(hand)
    
if __name__ == '__main__':
    main()

#Q10
from enum import Enum
from random import sample

class Cards(Enum):
    DECK = [{'value':i, 'suit':c} 
            for c in ['spades', 'clubs', 'hearts', 'diamonds'] 
            for i in range(2,15)]

def validate_num(message):
    valid = False
    while not valid:
        try:
            user_input = int(input(message))
            if user_input > 0:
                valid = True
            else:
                print('\nEnter a huge number for how many hands to play.')
        except ValueError:
            print('\nEnter a valid integers.')
    return user_input

def flush(COUNT, num):
    for i in range(num):
        hand = get_cards()
        if hand[0]['suit'] == hand[1]['suit'] == hand[2]['suit'] == hand[3]['suit'] == hand[4]['suit']:
            COUNT += 1
        else:
            pass
    return COUNT

def get_cards():
    rand_cards = sample(Cards.DECK.value, 5)
    return rand_cards

def main():
    COUNT = 0
    message = 'Enter the number of hands to play: '
    num = validate_num(message)
    prob = flush(COUNT, num)
    print(f'\n{prob} hand(s) had a Flush.\n')
    print(f'The probability to get a Flush from {num} hands is: {round((prob/num)*100, 3)}%.')

if __name__ == '__main__':
    main()

#Q11
def caesar_encrypt(realText, step):
	outText = []
	cryptText = []
	
	uppercase = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
	lowercase = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

	for eachLetter in realText:
		if eachLetter in uppercase:
			index = uppercase.index(eachLetter)
			crypting = (index + step) % 26
			cryptText.append(crypting)
			newLetter = uppercase[crypting]
			outText.append(newLetter)
		elif eachLetter in lowercase:
			index = lowercase.index(eachLetter)
			crypting = (index + step) % 26
			cryptText.append(crypting)
			newLetter = lowercase[crypting]
			outText.append(newLetter)
	return outText
x = input("Enter alphabets(As Many you desire): ")
code = caesar_encrypt(x, 2)
print("Cypher-Coder for the data entered above:")
print(code)

#Q12
from enum import Enum

class Music(Enum):
    KEY = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
    CHORD_STEPS = {1:[4,7], 2:[3,7], 3:[4,8], 4:[4,6], 5:[4,7,9], 6:[3,7,9],
                   7:[4,7,10], 8:[3,7,10], 9:[4,7,11], 10:[3,6,10]}

def validate_key(message_key):
    valid = False
    while not valid:
        try:
            user_input = input(message_key).capitalize()
            if user_input in Music.KEY.value:
                valid = True
            else:
                print('\nPlease enter a valid key.')
        except:
            pass
    return user_input

def validate_chord(message_chord):
    valid = False
    while not valid:
        try:
            user_input = int(input(message_chord))
            if user_input in Music.CHORD_STEPS.value.keys():
                valid = True
            else:
                print('\nEnter a number from the given options.')
        except ValueError:
            print('\nInvalid. Enter an integer.')
    return user_input

def get_notes(user_key, user_chord):
    notes = []
    key_list_transform = []
    for i in range(len(Music.KEY.value)):
        if user_key == Music.KEY.value[i]:
            notes.append(Music.KEY.value[i])
            key_list_transform = Music.KEY.value[i:] + Music.KEY.value[:i]
    for j in range(len(key_list_transform)):
        if j in Music.CHORD_STEPS.value[user_chord]:
            notes.append(key_list_transform[j])            
    return notes

def main():
    print('The following below are the musical keys:')
    print(Music.KEY.value)
    message_key = 'Enter a musical key: '
    user_key = validate_key(message_key)
    print('\nEnter 1 for chord type Major.')
    print('Enter 2 for chord type Minor.')
    print('Enter 3 for chord type Augmented Fifth.')
    print('Enter 4 for chord type Minor Fifth.')
    print('Enter 5 for chord type Major Sixth.')
    print('Enter 6 for chord type Minor Sixth.')
    print('Enter 7 for chord type Dominant Seventh.')
    print('Enter 8 for chord type Minor Seventh.')
    print('Enter 9 for chord type Major Seventh.')
    print('Enter 10 for chord type Diminshed Seventh.')
    message_chord = '\nEnter a chord type: '
    user_chord = validate_chord(message_chord)
    chord_notes = get_notes(user_key, user_chord)
    print(f'\nThe following are the chord notes: {chord_notes}.')

if __name__ == '__main__':
    main()

#Q13
L = [ 'aabaabac' , 'cabaabca' , 'aaabbcba' , 'aabacbab' , 'acababba' ] 

s = input("Enter string with one * :")

i=0
check=0
while i<5:
    check=0
    m=0
    if s[m]==L[i][m]:
        check=1
        m=m+1
        while m<len(s)-1 and check==1:
            if s[m]!=L[i][m]:
                check=0
        m=m+1
    if check==1:
        print(L[i])
    i=i+1

if check==0:
    print('No Match')

#Q14
d=[{'name':'Todd', 'phone':'555-1414', 'email':'todd@mail.net'},
{'name':'Helga', 'phone':'555-1618', 'email':'helga@mail.net'},
{'name':'Princess', 'phone':'555-3141', 'email':''},
{'name':'LJ', 'phone':'555-2718', 'email':'lj@mail.net'}]

for dict  in  range(len(d)):
  dd = d[dict]
  for keys,values in dd.items():
    if keys == "phone" and values[-1] == "8":
      print(dd)
    if keys == "email" and values =='':
      print(dd)

#Q15
year = {"American":"3:48pm","States":"11:26am","Eastern":"12:00am","Central":"11:26pm","Mountain":"12:00pm","Pacific":"3:48am"}
def time():
  print(year)
def time1():
  print(year.values())

time()
time1()

print("""\nTime: 11:48pm
Starting zone: Pacific
Ending zone: Eastern
2:48am""")

#Q16
d=[{ ' name ' : ' Todd ' , ' phone ' : ' 555-1414 ' , ' email ' : ' todd@mail.net ' }, 
   { ' name ' : ' Helga ' , ' phone ' : ' 555-1618 ' , ' email ' : ' helga@mail.net ' }, 
   { ' name ' : ' Princess ' , ' phone ' : ' 555-3141 ' , ' email ' : '' }, 
   { ' name ' : ' LJ ' , ' phone ' : ' 555-2718 ' , ' email ' : ' lj@mail.net ' }]
print('All the users whose phone number ends in an 8:')
i=0
for a in d:
    n=d[i][' phone ']
    if n[-2]=='8':
        print(d[i])
    i=i+1

print('\nAll the users that don’t have an email address listed:')
i=0
for a in d:
    n=d[i][' email ']
    if len(n)==0:
        print(d[i])
    i=i+1